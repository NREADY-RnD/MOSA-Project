// Copyright (c) MOSA Project. Licensed under the New BSD License.

// This code was generated by an automated template.


namespace Mosa.Compiler.Framework.Transform.Auto
{
	/// <summary>
	/// Transformation
	/// </summary>
	public static class AutoInstance
	{
		public static readonly BaseTransformation IR_ConstantFolding_Add32 = new IR.ConstantFolding.Add32();
		public static readonly BaseTransformation IR_ConstantFolding_Add64 = new IR.ConstantFolding.Add64();
		public static readonly BaseTransformation IR_ConstantFolding_AddR4 = new IR.ConstantFolding.AddR4();
		public static readonly BaseTransformation IR_ConstantFolding_AddR8 = new IR.ConstantFolding.AddR8();
		public static readonly BaseTransformation IR_ConstantFolding_AddWithCarry32 = new IR.ConstantFolding.AddWithCarry32();
		public static readonly BaseTransformation IR_ConstantFolding_AddWithCarry64 = new IR.ConstantFolding.AddWithCarry64();
		public static readonly BaseTransformation IR_ConstantFolding_ShiftRight32 = new IR.ConstantFolding.ShiftRight32();
		public static readonly BaseTransformation IR_ConstantFolding_ShiftRight64 = new IR.ConstantFolding.ShiftRight64();
		public static readonly BaseTransformation IR_ConstantFolding_ShiftLeft32 = new IR.ConstantFolding.ShiftLeft32();
		public static readonly BaseTransformation IR_ConstantFolding_ShiftLeft64 = new IR.ConstantFolding.ShiftLeft64();
		public static readonly BaseTransformation IR_ConstantFolding_DivUnsigned32 = new IR.ConstantFolding.DivUnsigned32();
		public static readonly BaseTransformation IR_ConstantFolding_DivUnsigned64 = new IR.ConstantFolding.DivUnsigned64();
		public static readonly BaseTransformation IR_ConstantFolding_DivSigned32 = new IR.ConstantFolding.DivSigned32();
		public static readonly BaseTransformation IR_ConstantFolding_DivSigned64 = new IR.ConstantFolding.DivSigned64();
		public static readonly BaseTransformation IR_ConstantFolding_DivR8 = new IR.ConstantFolding.DivR8();
		public static readonly BaseTransformation IR_ConstantFolding_DivR4 = new IR.ConstantFolding.DivR4();
		public static readonly BaseTransformation IR_ConstantFolding_GetHigh64 = new IR.ConstantFolding.GetHigh64();
		public static readonly BaseTransformation IR_ConstantFolding_GetLow64 = new IR.ConstantFolding.GetLow64();
		public static readonly BaseTransformation IR_ConstantFolding_To64 = new IR.ConstantFolding.To64();
		public static readonly BaseTransformation IR_ConstantFolding_LogicalAnd32 = new IR.ConstantFolding.LogicalAnd32();
		public static readonly BaseTransformation IR_ConstantFolding_LogicalAnd64 = new IR.ConstantFolding.LogicalAnd64();
		public static readonly BaseTransformation IR_ConstantFolding_LogicalOr32 = new IR.ConstantFolding.LogicalOr32();
		public static readonly BaseTransformation IR_ConstantFolding_LogicalOr64 = new IR.ConstantFolding.LogicalOr64();
		public static readonly BaseTransformation IR_ConstantFolding_LogicalXor32 = new IR.ConstantFolding.LogicalXor32();
		public static readonly BaseTransformation IR_ConstantFolding_LogicalXor64 = new IR.ConstantFolding.LogicalXor64();
		public static readonly BaseTransformation IR_ConstantFolding_LogicalNot32 = new IR.ConstantFolding.LogicalNot32();
		public static readonly BaseTransformation IR_ConstantFolding_LogicalNot64 = new IR.ConstantFolding.LogicalNot64();
		public static readonly BaseTransformation IR_ConstantFolding_MulUnsigned32 = new IR.ConstantFolding.MulUnsigned32();
		public static readonly BaseTransformation IR_ConstantFolding_MulUnsigned64 = new IR.ConstantFolding.MulUnsigned64();
		public static readonly BaseTransformation IR_ConstantFolding_MulSigned32 = new IR.ConstantFolding.MulSigned32();
		public static readonly BaseTransformation IR_ConstantFolding_MulSigned64 = new IR.ConstantFolding.MulSigned64();
		public static readonly BaseTransformation IR_ConstantFolding_MulR4 = new IR.ConstantFolding.MulR4();
		public static readonly BaseTransformation IR_ConstantFolding_MulR8 = new IR.ConstantFolding.MulR8();
		public static readonly BaseTransformation IR_ConstantFolding_RemUnsigned32 = new IR.ConstantFolding.RemUnsigned32();
		public static readonly BaseTransformation IR_ConstantFolding_RemUnsigned64 = new IR.ConstantFolding.RemUnsigned64();
		public static readonly BaseTransformation IR_ConstantFolding_RemSigned32 = new IR.ConstantFolding.RemSigned32();
		public static readonly BaseTransformation IR_ConstantFolding_RemSigned64 = new IR.ConstantFolding.RemSigned64();
		public static readonly BaseTransformation IR_ConstantFolding_RemR4 = new IR.ConstantFolding.RemR4();
		public static readonly BaseTransformation IR_ConstantFolding_RemR8 = new IR.ConstantFolding.RemR8();
		public static readonly BaseTransformation IR_ConstantFolding_Sub32 = new IR.ConstantFolding.Sub32();
		public static readonly BaseTransformation IR_ConstantFolding_Sub64 = new IR.ConstantFolding.Sub64();
		public static readonly BaseTransformation IR_ConstantFolding_SubR4 = new IR.ConstantFolding.SubR4();
		public static readonly BaseTransformation IR_ConstantFolding_SubR8 = new IR.ConstantFolding.SubR8();
		public static readonly BaseTransformation IR_ConstantFolding_SubWithCarry32 = new IR.ConstantFolding.SubWithCarry32();
		public static readonly BaseTransformation IR_ConstantFolding_SubWithCarry64 = new IR.ConstantFolding.SubWithCarry64();
		public static readonly BaseTransformation IR_ConstantFolding_SignExtend16x32 = new IR.ConstantFolding.SignExtend16x32();
		public static readonly BaseTransformation IR_ConstantFolding_SignExtend16x64 = new IR.ConstantFolding.SignExtend16x64();
		public static readonly BaseTransformation IR_ConstantFolding_SignExtend32x64 = new IR.ConstantFolding.SignExtend32x64();
		public static readonly BaseTransformation IR_ConstantFolding_SignExtend8x32 = new IR.ConstantFolding.SignExtend8x32();
		public static readonly BaseTransformation IR_ConstantFolding_SignExtend8x64 = new IR.ConstantFolding.SignExtend8x64();
		public static readonly BaseTransformation IR_ConstantFolding_ZeroExtend16x32 = new IR.ConstantFolding.ZeroExtend16x32();
		public static readonly BaseTransformation IR_ConstantFolding_ZeroExtend16x64 = new IR.ConstantFolding.ZeroExtend16x64();
		public static readonly BaseTransformation IR_ConstantFolding_ZeroExtend32x64 = new IR.ConstantFolding.ZeroExtend32x64();
		public static readonly BaseTransformation IR_ConstantFolding_ZeroExtend8x32 = new IR.ConstantFolding.ZeroExtend8x32();
		public static readonly BaseTransformation IR_ConstantFolding_ZeroExtend8x64 = new IR.ConstantFolding.ZeroExtend8x64();
		public static readonly BaseTransformation IR_ConstantFolding_ConvertInt32ToR4 = new IR.ConstantFolding.ConvertInt32ToR4();
		public static readonly BaseTransformation IR_ConstantFolding_ConvertInt32ToR8 = new IR.ConstantFolding.ConvertInt32ToR8();
		public static readonly BaseTransformation IR_ConstantFolding_ConvertInt64ToR4 = new IR.ConstantFolding.ConvertInt64ToR4();
		public static readonly BaseTransformation IR_ConstantFolding_ConvertInt64ToR8 = new IR.ConstantFolding.ConvertInt64ToR8();
		public static readonly BaseTransformation IR_ConstantFolding_IfThenElse32AlwaysTrue = new IR.ConstantFolding.IfThenElse32AlwaysTrue();
		public static readonly BaseTransformation IR_ConstantFolding_IfThenElse64AlwaysTrue = new IR.ConstantFolding.IfThenElse64AlwaysTrue();
		public static readonly BaseTransformation IR_ConstantFolding_IfThenElse32AlwaysFalse = new IR.ConstantFolding.IfThenElse32AlwaysFalse();
		public static readonly BaseTransformation IR_ConstantFolding_IfThenElse64AlwaysFalse = new IR.ConstantFolding.IfThenElse64AlwaysFalse();
		public static readonly BaseTransformation IR_Simplification_MoveInt32Propogation = new IR.Simplification.MoveInt32Propogation();
		public static readonly BaseTransformation IR_Simplification_MoveInt64Propogation = new IR.Simplification.MoveInt64Propogation();
		public static readonly BaseTransformation IR_Simplification_LogicalNot32Twice = new IR.Simplification.LogicalNot32Twice();
		public static readonly BaseTransformation IR_Simplification_LogicalNot64Twice = new IR.Simplification.LogicalNot64Twice();
		public static readonly BaseTransformation IR_Simplification_Add32Combine = new IR.Simplification.Add32Combine();
		public static readonly BaseTransformation IR_Simplification_Add64Combine = new IR.Simplification.Add64Combine();
		public static readonly BaseTransformation IR_Simplification_AddR4Combine = new IR.Simplification.AddR4Combine();
		public static readonly BaseTransformation IR_Simplification_AddR8Combine = new IR.Simplification.AddR8Combine();
		public static readonly BaseTransformation IR_Simplification_Sub32Combine = new IR.Simplification.Sub32Combine();
		public static readonly BaseTransformation IR_Simplification_Sub64Combine = new IR.Simplification.Sub64Combine();
		public static readonly BaseTransformation IR_Simplification_SubR4Combine = new IR.Simplification.SubR4Combine();
		public static readonly BaseTransformation IR_Simplification_SubR8Combine = new IR.Simplification.SubR8Combine();
		public static readonly BaseTransformation IR_Simplification_MulSigned32 = new IR.Simplification.MulSigned32();
		public static readonly BaseTransformation IR_Simplification_MulSigned64 = new IR.Simplification.MulSigned64();
		public static readonly BaseTransformation IR_Simplification_MulR4 = new IR.Simplification.MulR4();
		public static readonly BaseTransformation IR_Simplification_MulR8 = new IR.Simplification.MulR8();
		public static readonly BaseTransformation IR_Simplification_MulUnsigned32 = new IR.Simplification.MulUnsigned32();
		public static readonly BaseTransformation IR_Simplification_MulUnsigned64 = new IR.Simplification.MulUnsigned64();
		public static readonly BaseTransformation IR_Simplification_LogicalOr32Combine = new IR.Simplification.LogicalOr32Combine();
		public static readonly BaseTransformation IR_Simplification_LogicalOr64Combine = new IR.Simplification.LogicalOr64Combine();
		public static readonly BaseTransformation IR_Simplification_LogicalAnd32Combine = new IR.Simplification.LogicalAnd32Combine();
		public static readonly BaseTransformation IR_Simplification_LogicalAnd64Combine = new IR.Simplification.LogicalAnd64Combine();
		public static readonly BaseTransformation IR_Simplification_LogicalXor32Combine = new IR.Simplification.LogicalXor32Combine();
		public static readonly BaseTransformation IR_Simplification_LogicalXor64Combine = new IR.Simplification.LogicalXor64Combine();
		public static readonly BaseTransformation IR_Simplification_AddSub32Combine = new IR.Simplification.AddSub32Combine();
		public static readonly BaseTransformation IR_Simplification_AddSub64Combine = new IR.Simplification.AddSub64Combine();
		public static readonly BaseTransformation IR_Simplification_AddSubR4Combine = new IR.Simplification.AddSubR4Combine();
		public static readonly BaseTransformation IR_Simplification_AddSubR8Combine = new IR.Simplification.AddSubR8Combine();
		public static readonly BaseTransformation IR_Simplification_SubAdd32Combine = new IR.Simplification.SubAdd32Combine();
		public static readonly BaseTransformation IR_Simplification_SubAdd64Combine = new IR.Simplification.SubAdd64Combine();
		public static readonly BaseTransformation IR_Simplification_SubAddR4Combine = new IR.Simplification.SubAddR4Combine();
		public static readonly BaseTransformation IR_Simplification_SubAddR8Combine = new IR.Simplification.SubAddR8Combine();
		public static readonly BaseTransformation IR_Simplification_GetLow64FromTo64 = new IR.Simplification.GetLow64FromTo64();
		public static readonly BaseTransformation IR_Simplification_GetLHigh64FromTo64 = new IR.Simplification.GetLHigh64FromTo64();
		public static readonly BaseTransformation IR_StrengthReduction_Add32LeftZero = new IR.StrengthReduction.Add32LeftZero();
		public static readonly BaseTransformation IR_StrengthReduction_Add32RightZero = new IR.StrengthReduction.Add32RightZero();
		public static readonly BaseTransformation IR_StrengthReduction_Add64LeftZero = new IR.StrengthReduction.Add64LeftZero();
		public static readonly BaseTransformation IR_StrengthReduction_Add64RightZero = new IR.StrengthReduction.Add64RightZero();
		public static readonly BaseTransformation IR_StrengthReduction_ShiftRight32ZeroValue = new IR.StrengthReduction.ShiftRight32ZeroValue();
		public static readonly BaseTransformation IR_StrengthReduction_ShiftRight32ByZero = new IR.StrengthReduction.ShiftRight32ByZero();
		public static readonly BaseTransformation IR_StrengthReduction_ShiftRight64ZeroValue = new IR.StrengthReduction.ShiftRight64ZeroValue();
		public static readonly BaseTransformation IR_StrengthReduction_ShiftRight64ByZero = new IR.StrengthReduction.ShiftRight64ByZero();
		public static readonly BaseTransformation IR_StrengthReduction_ShiftLeft32ByZero = new IR.StrengthReduction.ShiftLeft32ByZero();
		public static readonly BaseTransformation IR_StrengthReduction_ShiftLeft64ByZero = new IR.StrengthReduction.ShiftLeft64ByZero();
		public static readonly BaseTransformation IR_StrengthReduction_Sub32ByZero = new IR.StrengthReduction.Sub32ByZero();
		public static readonly BaseTransformation IR_StrengthReduction_Sub64ByZero = new IR.StrengthReduction.Sub64ByZero();
		public static readonly BaseTransformation IR_StrengthReduction_Sub32BySame = new IR.StrengthReduction.Sub32BySame();
		public static readonly BaseTransformation IR_StrengthReduction_Sub64BySame = new IR.StrengthReduction.Sub64BySame();
		public static readonly BaseTransformation IR_StrengthReduction_MulUnsigned32ByPowerOfTwo = new IR.StrengthReduction.MulUnsigned32ByPowerOfTwo();
		public static readonly BaseTransformation IR_StrengthReduction_MulUnsigned64ByPowerOfTwo = new IR.StrengthReduction.MulUnsigned64ByPowerOfTwo();
		public static readonly BaseTransformation IR_StrengthReduction_MulSigned32ByPowerOfTwo = new IR.StrengthReduction.MulSigned32ByPowerOfTwo();
		public static readonly BaseTransformation IR_StrengthReduction_MulSigned64ByPowerOfTwo = new IR.StrengthReduction.MulSigned64ByPowerOfTwo();
		public static readonly BaseTransformation IR_StrengthReduction_DivUnsigned32ByPowerOfTwo = new IR.StrengthReduction.DivUnsigned32ByPowerOfTwo();
		public static readonly BaseTransformation IR_StrengthReduction_DivUnsigned64ByPowerOfTwo = new IR.StrengthReduction.DivUnsigned64ByPowerOfTwo();
		public static readonly BaseTransformation IR_StrengthReduction_DivSigned32ByPowerOfTwo = new IR.StrengthReduction.DivSigned32ByPowerOfTwo();
		public static readonly BaseTransformation IR_StrengthReduction_DivSigned64ByPowerOfTwo = new IR.StrengthReduction.DivSigned64ByPowerOfTwo();
		public static readonly BaseTransformation IR_StrengthReduction_RemUnsigned32ByPowerOfTwo = new IR.StrengthReduction.RemUnsigned32ByPowerOfTwo();
		public static readonly BaseTransformation IR_StrengthReduction_RemUnsigned64ByPowerOfTwo = new IR.StrengthReduction.RemUnsigned64ByPowerOfTwo();
		public static readonly BaseTransformation IR_Rewrite_Add32MultipleWithCommon = new IR.Rewrite.Add32MultipleWithCommon();
		public static readonly BaseTransformation IR_Rewrite_Add64MultipleWithCommon = new IR.Rewrite.Add64MultipleWithCommon();
		public static readonly BaseTransformation IR_Rewrite_Sub32MultipleWithCommon = new IR.Rewrite.Sub32MultipleWithCommon();
		public static readonly BaseTransformation IR_Rewrite_Sub64MultipleWithCommon = new IR.Rewrite.Sub64MultipleWithCommon();
		public static readonly BaseTransformation IR_ConstantMove_Add32 = new IR.ConstantMove.Add32();
		public static readonly BaseTransformation IR_ConstantMove_Add64 = new IR.ConstantMove.Add64();
		public static readonly BaseTransformation IR_ConstantMove_AddR4 = new IR.ConstantMove.AddR4();
		public static readonly BaseTransformation IR_ConstantMove_AddR8 = new IR.ConstantMove.AddR8();
		public static readonly BaseTransformation IR_ConstantMove_MulSigned32 = new IR.ConstantMove.MulSigned32();
		public static readonly BaseTransformation IR_ConstantMove_MulSigned64 = new IR.ConstantMove.MulSigned64();
		public static readonly BaseTransformation IR_ConstantMove_MulUnsigned32 = new IR.ConstantMove.MulUnsigned32();
		public static readonly BaseTransformation IR_ConstantMove_MulUnsigned64 = new IR.ConstantMove.MulUnsigned64();
		public static readonly BaseTransformation IR_ConstantMove_MulR4 = new IR.ConstantMove.MulR4();
		public static readonly BaseTransformation IR_ConstantMove_MulR8 = new IR.ConstantMove.MulR8();
		public static readonly BaseTransformation IR_ConstantMove_LogicalAnd32 = new IR.ConstantMove.LogicalAnd32();
		public static readonly BaseTransformation IR_ConstantMove_LogicalAnd64 = new IR.ConstantMove.LogicalAnd64();
		public static readonly BaseTransformation IR_ConstantMove_LogicalOr32 = new IR.ConstantMove.LogicalOr32();
		public static readonly BaseTransformation IR_ConstantMove_LogicalOr64 = new IR.ConstantMove.LogicalOr64();
		public static readonly BaseTransformation IR_ConstantMove_LogicalXor32 = new IR.ConstantMove.LogicalXor32();
		public static readonly BaseTransformation IR_ConstantMove_LogicalXor64 = new IR.ConstantMove.LogicalXor64();
	}
}
