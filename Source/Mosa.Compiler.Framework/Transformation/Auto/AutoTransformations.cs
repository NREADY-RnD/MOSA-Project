// Copyright (c) MOSA Project. Licensed under the New BSD License.

// This code was generated by an automated template.

using System.Collections.Generic;

namespace Mosa.Compiler.Framework.Transformation.Auto
{
	/// <summary>
	/// Transformations
	/// </summary>
	public static class AutoTransformations
	{
		public static readonly List<BaseTransformation> List = new List<BaseTransformation> {
			new IR.ConstantFolding.Add32(),
			new IR.ConstantFolding.Add64(),
			new IR.ConstantFolding.AddFloatR4(),
			new IR.ConstantFolding.AddFloatR8(),
			new IR.ConstantFolding.AddWithCarry32(),
			new IR.ConstantFolding.AddWithCarry64(),
			new IR.ConstantFolding.ShiftRight32(),
			new IR.ConstantFolding.ShiftRight64(),
			new IR.ConstantFolding.ShiftLeft32(),
			new IR.ConstantFolding.ShiftLeft64(),
			new IR.ConstantFolding.DivUnsigned32(),
			new IR.ConstantFolding.DivUnsigned64(),
			new IR.ConstantFolding.DivSigned32(),
			new IR.ConstantFolding.DivSigned64(),
			new IR.ConstantFolding.DivFloatR4(),
			new IR.ConstantFolding.DivFloatR8(),
			new IR.ConstantFolding.DivFloatR4(),
			new IR.ConstantFolding.GetHigh64(),
			new IR.ConstantFolding.GetLow64(),
			new IR.ConstantFolding.To64(),
			new IR.ConstantFolding.LogicalAnd32(),
			new IR.ConstantFolding.LogicalAnd64(),
			new IR.ConstantFolding.LogicalOr32(),
			new IR.ConstantFolding.LogicalOr64(),
			new IR.ConstantFolding.LogicalXor32(),
			new IR.ConstantFolding.LogicalXor64(),
			new IR.ConstantFolding.LogicalNot32(),
			new IR.ConstantFolding.LogicalNot64(),
			new IR.ConstantFolding.MulUnsigned32(),
			new IR.ConstantFolding.MulUnsigned64(),
			new IR.ConstantFolding.MulSigned32(),
			new IR.ConstantFolding.MulSigned64(),
			new IR.ConstantFolding.MulFloatR4(),
			new IR.ConstantFolding.MulFloatR8(),
			new IR.ConstantFolding.MulFloatR4(),
			new IR.ConstantFolding.RemUnsigned32(),
			new IR.ConstantFolding.RemUnsigned64(),
			new IR.ConstantFolding.RemSigned32(),
			new IR.ConstantFolding.RemSigned64(),
			new IR.ConstantFolding.RemFloatR4(),
			new IR.ConstantFolding.RemFloatR8(),
			new IR.ConstantFolding.RemFloatR4(),
			new IR.ConstantFolding.Sub32(),
			new IR.ConstantFolding.Sub64(),
			new IR.ConstantFolding.SubFloatR4(),
			new IR.ConstantFolding.SubFloatR8(),
			new IR.ConstantFolding.SubWithCarry32(),
			new IR.ConstantFolding.SubWithCarry64(),
			new IR.ConstantFolding.SignExtend16x32(),
			new IR.ConstantFolding.SignExtend16x64(),
			new IR.ConstantFolding.SignExtend32x64(),
			new IR.ConstantFolding.SignExtend8x32(),
			new IR.ConstantFolding.SignExtend8x64(),
			new IR.ConstantFolding.ZeroExtend16x32(),
			new IR.ConstantFolding.ZeroExtend16x64(),
			new IR.ConstantFolding.ZeroExtend32x64(),
			new IR.ConstantFolding.ZeroExtend8x32(),
			new IR.ConstantFolding.ZeroExtend8x64(),
			new IR.ConstantFolding.ConvertInt32ToFloatR4(),
			new IR.ConstantFolding.ConvertInt32ToFloatR4(),
			new IR.ConstantFolding.ConvertInt64ToFloatR4(),
			new IR.ConstantFolding.ConvertInt64ToFloatR8(),
			new IR.StrengthReduction.Add32LeftZero(),
			new IR.StrengthReduction.Add32RightZero(),
			new IR.StrengthReduction.Add64LeftZero(),
			new IR.StrengthReduction.Add64RightZero(),
			new IR.StrengthReduction.ShiftRight32ZeroValue(),
			new IR.StrengthReduction.ShiftRight32ByZero(),
			new IR.StrengthReduction.ShiftRight64ZeroValue(),
			new IR.StrengthReduction.ShiftRight64ByZero(),
			new IR.StrengthReduction.ShiftLeft32ByZero(),
			new IR.StrengthReduction.ShiftLeft32ByZero(),
			new IR.StrengthReduction.ShiftLeft64ByZero(),
			new IR.StrengthReduction.ShiftLeft64ByZero(),
			new IR.StrengthReduction.Sub32ByZero(),
			new IR.StrengthReduction.Sub64ByZero(),
			new IR.StrengthReduction.Sub32BySame(),
			new IR.StrengthReduction.Sub64BySame(),
			new IR.StrengthReduction.MulUnsigned32ByPowerOfTwo(),
			new IR.StrengthReduction.MulUnsigned64ByPowerOfTwo(),
			new IR.Rewrite.Add32MultipleWithCommon(),
			new IR.Rewrite.Add64MultipleWithCommon(),
			new IR.Rewrite.Sub32MultipleWithCommon(),
			new IR.Rewrite.Sub64MultipleWithCommon(),
		};
	}
}
